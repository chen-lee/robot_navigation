// Generated by gencpp from file readserial2st/position.msg
// DO NOT EDIT!


#ifndef READSERIAL2ST_MESSAGE_POSITION_H
#define READSERIAL2ST_MESSAGE_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace readserial2st
{
template <class ContainerAllocator>
struct position_
{
  typedef position_<ContainerAllocator> Type;

  position_()
    : positionX(0)
    , positionY(0)  {
    }
  position_(const ContainerAllocator& _alloc)
    : positionX(0)
    , positionY(0)  {
  (void)_alloc;
    }



   typedef int32_t _positionX_type;
  _positionX_type positionX;

   typedef int32_t _positionY_type;
  _positionY_type positionY;




  typedef boost::shared_ptr< ::readserial2st::position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::readserial2st::position_<ContainerAllocator> const> ConstPtr;

}; // struct position_

typedef ::readserial2st::position_<std::allocator<void> > position;

typedef boost::shared_ptr< ::readserial2st::position > positionPtr;
typedef boost::shared_ptr< ::readserial2st::position const> positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::readserial2st::position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::readserial2st::position_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace readserial2st

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'readserial2st': ['/home/chenlee/robot_navigation/src/navigation_experiment/get_coordinate/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::readserial2st::position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::readserial2st::position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::readserial2st::position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::readserial2st::position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::readserial2st::position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::readserial2st::position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::readserial2st::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e6dec27a67212d263c165fa84b8b2ea";
  }

  static const char* value(const ::readserial2st::position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e6dec27a67212d2ULL;
  static const uint64_t static_value2 = 0x63c165fa84b8b2eaULL;
};

template<class ContainerAllocator>
struct DataType< ::readserial2st::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "readserial2st/position";
  }

  static const char* value(const ::readserial2st::position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::readserial2st::position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 positionX\n\
int32 positionY\n\
";
  }

  static const char* value(const ::readserial2st::position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::readserial2st::position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.positionX);
      stream.next(m.positionY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::readserial2st::position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::readserial2st::position_<ContainerAllocator>& v)
  {
    s << indent << "positionX: ";
    Printer<int32_t>::stream(s, indent + "  ", v.positionX);
    s << indent << "positionY: ";
    Printer<int32_t>::stream(s, indent + "  ", v.positionY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // READSERIAL2ST_MESSAGE_POSITION_H
